digraph "BfpCheck"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{BfpCheck\n||# SetUp()\l# TearDown()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{KernelTests\n|+ test_type\l# division_factor\l# result_units\l# parallelization_factor\l|+ SetUpTestCase()\l+ TearDownTestCase()\l+ get_number_of_cases()\l# set_division_factor()\l# set_results_units()\l# set_parallelization\l_factor()\l# performance()\l# print_test_description()\l# get_case_name()\l# init_test()\l* get_input_parameter()\l* get_reference_parameter()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_kernel_tests.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{TestWithParam\< unsigned \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node4 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +conf" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{basic_json\< ObjectType,\l ArrayType, StringType,\l BooleanType, NumberIntegerType,\l NumberUnsignedType, NumberFloatType,\l AllocatorType, JSONSerializer \>\n||+ type_name()\l+ get_allocator()\l+ meta()\l* value_type\l* reference\l* const_reference\l* difference_type\l* size_type\l* allocator_type\l* pointer\l* const_pointer\l* iterator\l* const_iterator\l* reverse_iterator\l* const_reverse_iterator\l* object_t\l* array_t\l* string_t\l* boolean_t\l* number_integer_t\l* number_unsigned_t\l* number_float_t\l* operator==\l* operator==\l* operator==\l* operator!=\l* operator!=\l* operator!=\l* operator\<\l* operator\<=\l* operator\>\l* operator\>=\l* operator\<\<\l* operator\>\>\l* operator\<\<\l* operator\>\>\l* parse()\l* parse()\l* parse()\l* parse()\l* parse()\l* parse()\l* array()\l* object()\l* basic_json()\l* basic_json()\l* basic_json()\l* basic_json()\l* basic_json()\l* basic_json()\l* basic_json()\l* basic_json()\l* basic_json()\l* operator=()\l* ~basic_json()\l* iterator_wrapper()\l* iterator_wrapper()\l* begin()\l* begin()\l* cbegin()\l* end()\l* end()\l* cend()\l* rbegin()\l* rbegin()\l* rend()\l* rend()\l* crbegin()\l* crend()\l* to_msgpack()\l* from_msgpack()\l* to_cbor()\l* from_cbor()\l* add_to_vector()\l* get_from_vector()\l* to_msgpack_internal()\l* to_cbor_internal()\l* check_length()\l* from_msgpack_internal()\l* from_cbor_internal()\l* diff()\l* patch()\l* dump()\l* type()\l* is_primitive()\l* is_structured()\l* is_null()\l* is_boolean()\l* is_number()\l* is_number_integer()\l* is_number_unsigned()\l* is_number_float()\l* is_object()\l* is_array()\l* is_string()\l* is_discarded()\l* operator value_t()\l* get()\l* get()\l* get()\l* get()\l* get()\l* get_ptr()\l* get_ptr()\l* get_ref()\l* get_ref()\l* operator ValueType()\l* at()\l* at()\l* at()\l* at()\l* operator[]()\l* operator[]()\l* operator[]()\l* operator[]()\l* operator[]()\l* operator[]()\land 14 more...\l* find()\l* find()\l* count()\l* empty()\l* size()\l* max_size()\l* clear()\l* push_back()\l* operator+=()\l* push_back()\l* operator+=()\l* push_back()\l* operator+=()\l* push_back()\l* operator+=()\l* emplace_back()\land 10 more...\l* operator[]()\l* operator[]()\l* at()\l* at()\l* flatten()\l* unflatten()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classnlohmann_1_1basic__json.html",tooltip="a class to store JSON values"];
}
